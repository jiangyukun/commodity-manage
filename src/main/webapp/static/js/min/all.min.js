define("Assert", ["constants"], function (n) {
    function o() {
    }

    var e = n("constants");
    return o.correct = function (n) {
        if (n.code != e.success_code)throw new Error("jsonResponse error code")
    }, o
});
define("config", [], function (e, n, o) {
    o.exports = {phase: "dev", ctx: "wxshop"}
});
define("constants", [], function (s) {
    return {success_code: 0, success_message: "success"}
});
define("util", ["config", "Assert", "zepto"], function (t, n) {
    var e = t("config"), r = t("Assert"), i = t("zepto"), o = n.getCtx = function () {
        return ctx || e.ctx || ""
    };
    n.url = function (t) {
        return this.getCtx() + t
    }, n.tip = function (t) {
        alert(t)
    }, n.sendErrorLog = function (t) {
        i.ajax({
            url: o() + "/debug/log", type: "post", data: {content: JSON.stringify(t)}, success: function () {
                alert("error msg send to server")
            }
        })
    }, n.wxConfig = function (t, n) {
        i.ajax({
            url: o() + "/weixin/jssdk", type: "post", data: {url: location.href}, success: function (e) {
                r.correct(e);
                var i = e.data;
                t.config({debug: !1, appId: i.appId, timestamp: i.timestamp, nonceStr: i.nonceStr, signature: i.signature, jsApiList: n})
            }, dataType: "json"
        })
    }, n.initWx = function (t, n) {
        "dev" !== e.phase && (t.error(function (t) {
            util.sendErrorLog(t)
        }), this.wxConfig(t, n))
    }
});
define("webApp", ["zepto", "fastclick"], function (t) {
    var c = t("zepto"), n = t("fastclick");
    return {
        init: function () {
            c(function () {
                n.attach(document.body)
            })
        }
    }
});
define("dialog", ["AlertModel", "Alert", "ConfirmModel", "Confirm"], function (n) {
    var o = n("AlertModel"), e = n("Alert"), r = n("ConfirmModel"), l = n("Confirm");
    return {
        alert: function (n) {
            var r = new o({message: n}), l = new e({model: r});
            return l.show(), l
        }, confirm: function (n, o, e) {
            var t, c, f, i;
            "string" == typeof n ? (c = n, t = f = i = null) : (o = n.confirmCallback || _.noop, e = n.cancelCallback || _.noop);
            var a = new r({title: t || "提示", content: c || "", cancel: f || "取消", confirm: i || "确定"}), m = new l({model: a});
            return "function" == typeof o && m.on("confirm", o), "function" == typeof e && m.on("cancel", e), m.show(), m
        }
    }
});
define("static/js/common/module/SelectCategoryView", ["zepto", "underscore", "backbone"], function (t) {
    var e = t("zepto"), o = t("underscore"), i = t("backbone"), n = t("util");
    t("CommodityCategoryList");
    return o.templateSettings = {interpolate: /{{(.+?)}}/g}, i.View.extend({
        className: "container-fluid",
        template: o.template(e("#selectCategoryTemplate").html()),
        itemTemplate: o.template(e("#categoryItemTemplate").html()),
        events: {"tap .list-group-item": "select", "tap: #cancelSelectCategoryBtn": "destroy", "tap: #confirmSelectCategoryBtn": "destroy"},
        initialize: function () {
            var t = this;
            e("body").delegate("#cancelSelectCategoryBtn", "tap", function () {
                t.destroy()
            }), e("body").delegate("#confirmSelectCategoryBtn", "tap", function () {
                t.destroy()
            }), this.listenTo(this.model, "sync", this.render)
        },
        render: function () {
            var t = this, o = "";
            this.model.each(function (e) {
                e.get("name");
                o += t.itemTemplate(e.toJSON())
            });
            var i = this.$el.attr("id", "selectCategoryItemPopup").html(this.template({content: o}));
            e("body").append(i)
        },
        open: function () {
            this.model.fetch({url: n.url("/commodity/getCommodityCategoryInfo?includeCommodity=false")})
        },
        select: function (t) {
            var o = e(t.target).closest(".list-group-item").find("span"), i = o.text(), n = o.attr("id");
            this.destroy(n, i)
        },
        destroy: function (t, e) {
            this.$el.remove(), this.trigger("close", t || "", e || "")
        }
    })
});
define("AlertModel", ["backbone"], function (e) {
    var n = e("backbone");
    return n.Model.extend({defaults: {title: "提示", message: "", confirm: "确定"}})
});
define("ConfirmModel", ["backbone"], function (e) {
    var n = e("backbone");
    return n.Model.extend({defaults: {title: "提示", content: "", cancel: "取消", confirm: "确定"}})
});
define("Alert", ["zepto", "util", "AlertModel", "underscore", "backbone"], function (e) {
    var t, i = e("zepto"), n = e("util"), l = (e("AlertModel"), e("underscore")), s = e("backbone");
    return i.ajax({
        type: "get", url: n.url("/static/html/alert.html"), success: function (e) {
            t = e
        }
    }), s.View.extend({
        className: "weui_dialog_alert", events: {"tap .js_btn_confirm": "confirm"}, initialize: function () {
            this.template = l.template(t);
            var e = l.uniqueId("alert");
            this.$el.attr("id", e).html(this.template(this.model.toJSON())), i("body").append(this.$el)
        }, render: function () {
            return this
        }, confirm: function () {
            this.$el.css({display: "none"})
        }, show: function () {
            this.$el.css({display: "block"})
        }
    })
});
define("Confirm", ["zepto", "util", "ConfirmModel", "underscore", "backbone"], function (i) {
    var t, e = i("zepto"), n = i("util"), c = (i("ConfirmModel"), i("underscore")), o = i("backbone");
    return e.ajax({
        type: "get", url: n.url("/static/html/confirm.html"), success: function (i) {
            t = i
        }
    }), o.View.extend({
        className: "weui_dialog_confirm", events: {"tap .js_btn_cancel": "cancel", "tap .js_btn_confirm": "confirm"}, initialize: function () {
            this.template = c.template(t);
            var i = c.uniqueId("confirm_");
            this.$el.attr("id", i).html(this.template(this.model.toJSON())), this._hide(), e("body").append(this.$el)
        }, render: function () {
            return this
        }, cancel: function () {
            this._hide(), this.trigger("cancel")
        }, confirm: function () {
            this._hide(), this.trigger("confirm")
        }, _hide: function () {
            this.$el.css({display: "none"})
        }, show: function () {
            this.$el.css({display: "block"}), this.trigger("show")
        }
    })
});
